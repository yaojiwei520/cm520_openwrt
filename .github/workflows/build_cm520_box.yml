name: CM520_for_immortalwrt_AdGuardHome

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  push:
    paths:
      - 'Config_Files/CM520_for_immortalwrt_AdGuardHome.config'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: Config_Files/CM520_for_immortalwrt_AdGuardHome.config
  DIY_P1_SH: DIY/diy-part1-immortalwrt.sh
  DIY_P2_SH: DIY/diy-part2-immortalwrt.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # Remove unnecessary software
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc

        # Update and install dependencies
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depends_ubuntu_2204)

        # Clean up system
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

        # Set timezone and create working directory
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone OpenWrt source code
      working-directory: /workdir
      run: |
        df -hT $PWD # Print disk usage
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds and update
      run: |
        # Move feeds.conf if exists
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
        # Execute DIY part 1 script
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

        # Update and install luci feed and related package
        ./scripts/feeds update luci
        ./scripts/feeds install luci-app-cpufreq

    - name: Update and Install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration and execute DIY part 2 script
      run: |
        # Move custom files and configuration
        cd openwrt
        [ -e ../files ] && mv ../files ./files
        [ -e ../$CONFIG_FILE ] && mv ../$CONFIG_FILE ./.config

        # Execute DIY part 2 script with debug
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        set -x
        $GITHUB_WORKSPACE/$DIY_P2_SH
        set +x


#    - name: SSH connection to Actions (Optional)
#      uses: P3TERX/ssh2actions@v1.0.0
#      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
#      env:
#        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
#        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download packages
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
         # Remove old download package and retry
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j2 || make -j2 V=s
        echo "::setOutput name=status::success"

        # Get device name, date
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

    - name: Check disk space
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory (artifact)
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize firmware files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets
        FIRMWARE_DIR=$(find . -maxdepth 2 -type d -name "generic" | head -n 1)
        cd ${FIRMWARE_DIR}
        rm -rf packages config.buildinfo feeds.buildinfo sha256sums version.buildinfo *.manifest Packages.tar.gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::setOutput name=status::success"

    - name: Upload firmware directory (artifact)
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

#    - name: Upload firmware to cowtransfer
#      id: cowtransfer
#      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
#      run: |
#        curl -fsSL git.io/file-transfer | sh
#        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
#        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
#        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
#    - name: Upload firmware to WeTransfer
#      id: wetransfer
#      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
#      run: |
#        curl -fsSL git.io/file-transfer | sh
#        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
#        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
#        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

#    - name: Generate release tag
#      id: tag
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      run: |
#        echo "::set-output name=release_tag::CanBox_CM520-79f-Lienol-DNSfilter$(date +"%Y.%m.%d-%H%M")"
#        touch release.txt
#        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
#        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
#        echo "::set-output name=status::success"

#    - name: Upload firmware to release
#      uses: softprops/action-gh-release@v1
#      if: steps.tag.outputs.status == 'success' && !cancelled()
#      env:
#        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#      with:
#        tag_name: ${{ steps.tag.outputs.release_tag }}
#        body_path: release.txt
#        files: ${{ env.FIRMWARE }}/*

#    - name: Delete workflow runs
#      uses: GitRML/delete-workflow-runs@main
#      with:
#        retain_days: 1
#        keep_minimum_runs: 10
#
#    - name: Remove old Releases
#      uses: dev-drprasad/delete-older-releases@v0.1.0
#      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
#      with:
#        keep_latest: 14
#        delete_tags: true
#      env:
#        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      with:
        name: CM520_for_immortalwrt_AdGuardHome ${{ env.PRODUCT_NAME }}${{ env.DATE }}
        tag: CM520_for_immortalwrt_AdGuardHome${{ env.FILE_NAME }}
        artifacts: ${{ env.FIRMWARE }}/*
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        body: |
          * ÊòüÈôÖÂÆùÁõíCM520-Box&immortalwrtÂõ∫‰ª∂
          * AdGuardHome-Home
          * openwrt-23.05
          * Default username: root
